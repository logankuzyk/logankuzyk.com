version: '3.8'

networks:
  web:   # internet-facing
  app:   # internal-only

volumes:
  db_data:

services:
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - website
    networks: [web, app]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs/logankuzyk.com.pem:/etc/ssl/cloudflare/logankuzyk.com.pem:ro
      - ./certs/logankuzyk.com.key:/etc/ssl/cloudflare/logankuzyk.com.key:ro
    # Optional hardening:
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    # Optional: simple healthcheck (assumes HTTPS works end-to-end)
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --server-response https://localhost 2>&1 | awk 'NR==1{print $2}' | grep -qE '200|301|302'"]
      interval: 30s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17.5-alpine
    restart: unless-stopped
    networks: [app]
    env_file:
      - .env.postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options: { max-size: "10m", max-file: "3" }
    # Optional: set timezone for logs
    # environment:
    #   TZ: "UTC"

  website:
    build:
      context: .
      dockerfile: Dockerfile
      # If your Dockerfile uses multi-stage with a "runner" target, uncomment:
      # target: runner
    restart: unless-stopped
    env_file:
      - .env.production
    networks:
      - app
    depends_on:
      postgres:
        condition: service_healthy
    # expose: ["3000"]  # optional; not required for service-to-service
    # Optional hardening:
    read_only: true
    tmpfs:
      - /tmp
    # If your app writes to a specific dir (e.g., .next/cache), mount a tmpfs or a writable volume for it.
    # volumes:
    #   - type: tmpfs
    #     target: /app/.next/cache
